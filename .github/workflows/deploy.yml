
name: Deploy

on:
  
  push:
    branches: [ main ]
    paths: [ 'src/**/.version' ]


env:
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}\output
  NUGET_SOURCE_URL: 'https://nuget.pkg.github.com/${{ secrets.NUGET_USER }}/index.json'
 
 
jobs:

  get_changes:

    runs-on: ubuntu-latest

    steps:
      
      #- uses: actions/checkout@v2
    
      - id: files
        uses: jitterbit/get-changed-files@v1
        with:
          format: 'json'
          
      - run: |
          echo ${{ steps.files.outputs.all }}
      
      - run: |
          json='${{ steps.files.outputs.all }}'
          echo "$json" | jq -c '[ .[] | select(endswith("/.version")) ]'
          
      - id: set-matrix
        run: |
          json='${{ steps.files.outputs.all }}'
          var=$(echo "$json" | jq -c '[ .[] | select(endswith("/.version")) ]')
          echo "::set-output name=matrix::$(echo $var | sed -e 's@/.version@@g')"
        
      - run: echo ${{ steps.set-matrix.outputs.matrix }}
      
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
  
  
  deploy:
    
    needs: get_changes
    runs-on: windows-latest
    
    strategy:
      matrix:
        project: ${{ fromJson(needs.get_changes.outputs.matrix) }}

    steps:
    
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
            
    - id: version
      name: Get Version
      run: |
        $var=$(Get-Content -Path "${{ matrix.project }}/.version")
        echo "::set-output name=version::$(echo $var)"
      
    - name: Restore
      run: dotnet restore "${{ matrix.project }}"
      
    - name: Build
      run: dotnet build "${{ matrix.project }}" --configuration Release --no-restore
      
    - name: Pack
      run: dotnet pack "${{ matrix.project }}" --no-restore --no-build --configuration Release --include-symbols -p:PackageVersion=${{ steps.version.outputs.version }} --output "${{ env.PACKAGE_OUTPUT_DIRECTORY }}"

    - name: Push
      run: |
        dotnet tool install gpr -g
        gpr push "${{ env.PACKAGE_OUTPUT_DIRECTORY }}\*.nupkg" -k ${{ secrets.NUGET_AUTH_TOKEN }} --repository ${{ secrets.NUGET_USER }}/${{ github.event.repository.name }}
      
      
    
